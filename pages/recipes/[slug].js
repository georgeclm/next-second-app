import Head from "next/head";
import { useState } from "react";
import {
  sanityClient,
  urlFor,
  usePreviewSubscription,
  PortableText,
} from "../../lib/sanity";

const recipeQuery = `*[_type == "recipe" && slug.current == $slug][0]{
      _id,
      name,
      slug,
      mainImage,
      ingredient[]{
        _key,
        unit,
        wholeNumber,
        fraction,
        ingredient->{
          name
        }
      },
      instructions,
      likes
    }`;

export default function OneRecipe({ data, preview }) {
  if (!data) return <div>Loading...</div>;
  // this preview subscription to set up connection to the real data so doenst need to start the api req
  // this to make the connection behind the scene to real content so what happen in the back is live to the server
  const { data: recipe } = usePreviewSubscription(recipeQuery, {
    params: { slug: data.recipe?.slug.current },
    initialData: data,
    enabled: preview,
  });

  const [likes, setLikes] = useState(data?.recipe?.likes);

  const addLike = async () => {
    const res = await fetch("/api/handle-like", {
      method: "POST",
      body: JSON.stringify({ _id: recipe._id }),
    }).catch((error) => console.log(error));

    const data = await res.json();

    setLikes(data.likes);
  };
  return (
    <>
      <Head>
        <title>{recipe.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <article className="recipe">
        <h1>{recipe.name}</h1>

        <button className="like-button" onClick={addLike}>
          {likes} ❤️
        </button>

        <main className="content recipe-card">
          <img src={urlFor(recipe?.mainImage).url()} alt={recipe.name} />
          <br />
          <div className="breakdown">
            <ul className="ingredients">
              {recipe.ingredient?.map((ingredient) => (
                <li key={ingredient._key} className="ingredient">
                  {ingredient?.wholeNumber}
                  <br />
                  {ingredient?.fraction} {ingredient?.unit}
                  <br />
                  {ingredient?.ingredient?.name}
                </li>
              ))}
            </ul>
            <PortableText
              blocks={recipe?.instructions}
              className="instructions"
            />
          </div>
        </main>
      </article>
    </>
  );
}
// get static paths to get the path from the url
export async function getStaticPaths() {
  const paths = await sanityClient.fetch(
    `*[_type == "recipe" && defined(slug.current)]{
      "params": {
        "slug": slug.current
      }
    }`
  );

  return {
    paths,
    fallback: true,
  };
}
// the path then passed to the static props to take the data based on the path
export async function getStaticProps({ params }) {
  // from the path get the slug inside the params in the paths
  const { slug } = params;
  // fetch request with the current slug to get the data from the const above and pass the slug too to the groq query
  const recipe = await sanityClient.fetch(recipeQuery, { slug });
  return { props: { data: { recipe }, preview: true } };
}
